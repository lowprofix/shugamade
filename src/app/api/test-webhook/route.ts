import { NextRequest, NextResponse } from "next/server";

/**
 * Route de test pour v√©rifier la configuration des webhooks N8N
 */
export async function GET(request: NextRequest) {
  try {
    const calendarEventsUrl = process.env.N8N_WEBHOOK_CALENDAR_EVENTS;
    const calendarUpdateUrl = process.env.N8N_WEBHOOK_CALENDAR_UPDATE;

    console.log("üîß Configuration des webhooks:");
    console.log(`üìÖ Events URL: ${calendarEventsUrl}`);
    console.log(`üîÑ Update URL: ${calendarUpdateUrl}`);

    // Test 1: R√©cup√©ration des √©v√©nements
    let eventsTest = { success: false, error: "", count: 0 };
    if (calendarEventsUrl) {
      try {
        const response = await fetch(calendarEventsUrl, {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });
        
        if (response.ok) {
          const events = await response.json();
          eventsTest = { 
            success: true, 
            error: "", 
            count: Array.isArray(events) ? events.length : 0 
          };
        } else {
          eventsTest.error = `HTTP ${response.status}: ${response.statusText}`;
        }
      } catch (error) {
        eventsTest.error = error instanceof Error ? error.message : "Erreur inconnue";
      }
    } else {
      eventsTest.error = "URL non configur√©e";
    }

    // Test 2: Test de mise √† jour (avec un faux ID)
    let updateTest = { success: false, error: "" };
    if (calendarUpdateUrl) {
      try {
        const response = await fetch(calendarUpdateUrl, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            eventId: "test-id-123",
            summary: "Test - Mise √† jour",
          }),
        });
        
        // M√™me si l'ID n'existe pas, on veut voir si le webhook r√©pond
        updateTest = { 
          success: response.status !== 404, // 404 = ID inexistant mais webhook fonctionne
          error: response.ok ? "" : `HTTP ${response.status}: ${response.statusText}`
        };
      } catch (error) {
        updateTest.error = error instanceof Error ? error.message : "Erreur inconnue";
      }
    } else {
      updateTest.error = "URL non configur√©e";
    }

    return NextResponse.json({
      success: true,
      configuration: {
        eventsUrl: calendarEventsUrl || "Non configur√©e",
        updateUrl: calendarUpdateUrl || "Non configur√©e",
      },
      tests: {
        events: eventsTest,
        update: updateTest,
      },
      recommendations: [
        eventsTest.success ? "‚úÖ R√©cup√©ration d'√©v√©nements OK" : "‚ùå Probl√®me avec la r√©cup√©ration d'√©v√©nements",
        updateTest.success ? "‚úÖ Webhook de mise √† jour accessible" : "‚ùå Probl√®me avec le webhook de mise √† jour",
        "üí° V√©rifiez que N8N est d√©marr√© et accessible",
        "üí° V√©rifiez que les workflows N8N sont activ√©s",
        "üí° V√©rifiez les permissions Google Calendar dans N8N"
      ]
    });

  } catch (error) {
    console.error("Erreur lors du test des webhooks:", error);
    
    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors du test des webhooks",
        details: error instanceof Error ? error.message : "Erreur inconnue"
      },
      { status: 500 }
    );
  }
} 
{
  "name": "Rappels automatiques des rendez-vous",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hour": 17,
              "minute": 30
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [250, 300]
    },
    {
      "parameters": {
        "url": "https://votre-domaine.com/api/bookings/tomorrow",
        "authentication": "headerAuth",
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Récupérer les rendez-vous",
      "type": "n8n-nodes-base.httpRequest",
      "position": [450, 300]
    },
    {
      "parameters": {
        "functionCode": "// Vérifier si nous avons des rendez-vous pour demain\nconst response = $input.all()[0].json;\n\nif (response.count === 0) {\n  // Aucun rendez-vous pour demain, terminer le workflow\n  return [];\n}\n\n// Préparer les messages pour chaque client\nreturn response.bookings.map(booking => {\n  // Extraire l'heure de début (format ISO)\n  const startTime = new Date(booking.start);\n  const formattedTime = startTime.toLocaleTimeString('fr-FR', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  \n  // Construire le texte du message\n  const messageText = `Bonjour ${booking.customerInfo.first_name},\\n\\nNous vous rappelons votre rendez-vous \"${booking.serviceName}\" demain ${response.formattedDate} à ${formattedTime} chez ShugaMade.\\n\\nEn cas d'empêchement, merci de nous contacter au plus tôt au 06 597 56 23.\\n\\nÀ bientôt,\\nL'équipe ShugaMade`;\n  \n  return {\n    customerPhone: `${booking.customerInfo.phoneCountryCode}${booking.customerInfo.phone}`,\n    customerName: booking.customerInfo.first_name,\n    messageText,\n    appointmentId: booking.id,\n    appointmentTime: formattedTime,\n    appointmentService: booking.serviceName\n  };\n});"
      },
      "name": "Préparer les messages",
      "type": "n8n-nodes-base.function",
      "position": [650, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "stopOnFail": true
        }
      },
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [850, 300]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [850, 450],
      "webhookId": "wait-node"
    },
    {
      "parameters": {
        "chatId": "={{ $json.customerPhone }}",
        "text": "={{ $json.messageText }}"
      },
      "name": "WhatsApp",
      "type": "n8n-nodes-base.whatsApp",
      "position": [1050, 300],
      "credentials": {
        "whatsAppApi": "whatsapp-account"
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $prevNode[\"WhatsApp\"].success }}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "position": [1250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Enregistrer le succès de l'envoi du rappel\nconst data = $input.all()[0].json;\nconsole.log(`✓ Rappel envoyé avec succès à ${data.customerName} pour le rendez-vous ${data.appointmentId}`);\nreturn data;"
      },
      "name": "Succès",
      "type": "n8n-nodes-base.function",
      "position": [1450, 200]
    },
    {
      "parameters": {
        "functionCode": "// Enregistrer l'échec de l'envoi du rappel\nconst data = $input.all()[0].json;\nconsole.error(`✗ Échec de l'envoi du rappel à ${data.customerName} pour le rendez-vous ${data.appointmentId}`);\nreturn data;"
      },
      "name": "Échec",
      "type": "n8n-nodes-base.function",
      "position": [1450, 400]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Récupérer les rendez-vous",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Récupérer les rendez-vous": {
      "main": [
        [
          {
            "node": "Préparer les messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer les messages": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Succès",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Échec",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "notes": "Ce workflow se déclenche automatiquement à 17h30 chaque jour pour envoyer des rappels par WhatsApp aux clients ayant des rendez-vous le lendemain. Vous devez configurer l'accès à l'API WhatsApp Business dans n8n et définir la variable d'environnement API_TOKEN."
}

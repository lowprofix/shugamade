import { NextRequest, NextResponse } from "next/server";

interface CalendarEvent {
  id: string;
  summary?: string;
  description?: string;
  start?: {
    dateTime?: string;
    timeZone?: string;
  };
  end?: {
    dateTime?: string;
    timeZone?: string;
  };
}

interface UpdateResult {
  eventId: string;
  oldSummary: string;
  newSummary: string;
  success: boolean;
  error?: string;
}

/**
 * V√©rifie si un √©v√©nement utilise l'ancien format "R√©servation - Service - Nom"
 */
function isOldFormat(summary: string | undefined): boolean {
  if (!summary) return false;
  // Supprimer les espaces en d√©but et fin, puis v√©rifier
  return summary.trim().toLowerCase().startsWith("r√©servation -");
}

/**
 * Convertit un titre d'√©v√©nement de l'ancien format vers le nouveau
 * Ancien: "R√©servation - Service - Nom"
 * Nouveau: "Nom - Service"
 */
function convertToNewFormat(oldSummary: string): string {
  // Supprimer les espaces en d√©but et fin
  const cleanSummary = oldSummary.trim();
  const parts = cleanSummary.split("-");
  
  if (parts.length >= 3) {
    // Format: "R√©servation - Service - Nom" -> "Nom - Service"
    const service = parts[1].trim();
    const clientName = parts[2].trim();
    return `${clientName} - ${service}`;
  }
  
  if (parts.length === 2) {
    // Format: "R√©servation - Service Nom" -> "Nom - Service"
    const servicePart = parts[1].trim();
    const words = servicePart.split(" ");
    
    if (words.length > 1) {
      const service = words[0];
      const clientName = words.slice(1).join(" ");
      return `${clientName} - ${service}`;
    }
  }
  
  // Si on ne peut pas parser, retourner tel quel
  return oldSummary;
}

/**
 * Met √† jour un √©v√©nement via le webhook N8N
 */
async function updateEvent(event: CalendarEvent, newSummary: string): Promise<UpdateResult> {
  const updateUrl = process.env.N8N_WEBHOOK_CALENDAR_UPDATE;
  
  if (!updateUrl) {
    return {
      eventId: event.id,
      oldSummary: event.summary || "",
      newSummary,
      success: false,
      error: "URL de mise √† jour non configur√©e"
    };
  }

  try {
    console.log(`üîÑ Mise √† jour de l'√©v√©nement ${event.id}`);
    console.log(`üìù Ancien titre: "${event.summary}"`);
    console.log(`‚ú® Nouveau titre: "${newSummary}"`);
    console.log(`üåê URL webhook: ${updateUrl}`);

    const payload = {
      eventId: event.id,
      summary: newSummary,
      description: event.description,
      start: event.start,
      end: event.end,
    };

    console.log(`üì¶ Payload envoy√©:`, JSON.stringify(payload, null, 2));

    const response = await fetch(updateUrl, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    console.log(`üì° R√©ponse HTTP: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur r√©ponse: ${errorText}`);
      throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ R√©ponse webhook:`, JSON.stringify(result, null, 2));
    
    return {
      eventId: event.id,
      oldSummary: event.summary || "",
      newSummary,
      success: true,
    };
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour de l'√©v√©nement ${event.id}:`, error);
    return {
      eventId: event.id,
      oldSummary: event.summary || "",
      newSummary,
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue"
    };
  }
}

/**
 * API Route pour mettre √† jour tous les √©v√©nements du calendrier
 * avec le nouveau format "Nom - Service"
 */
export async function POST(request: NextRequest) {
  try {
    console.log("D√©but de la mise √† jour des √©v√©nements du calendrier...");

    // 1. R√©cup√©rer tous les √©v√©nements du calendrier
    const calendarEventsUrl = process.env.N8N_WEBHOOK_CALENDAR_EVENTS;
    
    if (!calendarEventsUrl) {
      return NextResponse.json(
        {
          success: false,
          error: "URL des √©v√©nements du calendrier non configur√©e"
        },
        { status: 500 }
      );
    }

    const response = await fetch(calendarEventsUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration des √©v√©nements: ${response.status}`);
    }

    const events: CalendarEvent[] = await response.json();
    console.log(`${events.length} √©v√©nements r√©cup√©r√©s`);

    // 2. Filtrer les √©v√©nements avec l'ancien format
    const eventsToUpdate = events.filter(event => isOldFormat(event.summary));
    console.log(`${eventsToUpdate.length} √©v√©nements √† mettre √† jour`);

    if (eventsToUpdate.length === 0) {
      return NextResponse.json({
        success: true,
        message: "Aucun √©v√©nement √† mettre √† jour",
        totalEvents: events.length,
        updatedEvents: 0,
        results: []
      });
    }

    // 3. Mettre √† jour chaque √©v√©nement
    const updatePromises = eventsToUpdate.map(async (event) => {
      const newSummary = convertToNewFormat(event.summary || "");
      console.log(`Mise √† jour: "${event.summary}" -> "${newSummary}"`);
      
      return await updateEvent(event, newSummary);
    });

    const results = await Promise.all(updatePromises);

    // 4. Analyser les r√©sultats
    const successCount = results.filter(r => r.success).length;
    const failureCount = results.filter(r => !r.success).length;

    console.log(`Mise √† jour termin√©e: ${successCount} succ√®s, ${failureCount} √©checs`);

    return NextResponse.json({
      success: true,
      message: `Mise √† jour termin√©e: ${successCount} √©v√©nements mis √† jour, ${failureCount} √©checs`,
      totalEvents: events.length,
      eventsToUpdate: eventsToUpdate.length,
      successCount,
      failureCount,
      results: results.map(r => ({
        eventId: r.eventId,
        oldSummary: r.oldSummary,
        newSummary: r.newSummary,
        success: r.success,
        error: r.error
      }))
    });

  } catch (error) {
    console.error("Erreur lors de la mise √† jour des √©v√©nements:", error);
    
    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors de la mise √† jour des √©v√©nements",
        details: error instanceof Error ? error.message : "Erreur inconnue"
      },
      { status: 500 }
    );
  }
}

/**
 * API Route pour obtenir un aper√ßu des √©v√©nements √† mettre √† jour
 * sans effectuer la mise √† jour
 */
export async function GET(request: NextRequest) {
  try {
    // R√©cup√©rer tous les √©v√©nements du calendrier
    const calendarEventsUrl = process.env.N8N_WEBHOOK_CALENDAR_EVENTS;
    
    if (!calendarEventsUrl) {
      return NextResponse.json(
        {
          success: false,
          error: "URL des √©v√©nements du calendrier non configur√©e"
        },
        { status: 500 }
      );
    }

    const response = await fetch(calendarEventsUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration des √©v√©nements: ${response.status}`);
    }

    const events: CalendarEvent[] = await response.json();

    // Analyser les √©v√©nements
    const eventsToUpdate = events.filter(event => isOldFormat(event.summary));
    const preview = eventsToUpdate.map(event => ({
      eventId: event.id,
      currentSummary: event.summary,
      newSummary: convertToNewFormat(event.summary || ""),
      startTime: event.start?.dateTime
    }));

    return NextResponse.json({
      success: true,
      totalEvents: events.length,
      eventsToUpdate: eventsToUpdate.length,
      preview: preview.slice(0, 10), // Limiter l'aper√ßu aux 10 premiers
      hasMore: preview.length > 10
    });

  } catch (error) {
    console.error("Erreur lors de l'aper√ßu des √©v√©nements:", error);
    
    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors de l'aper√ßu des √©v√©nements",
        details: error instanceof Error ? error.message : "Erreur inconnue"
      },
      { status: 500 }
    );
  }
} 